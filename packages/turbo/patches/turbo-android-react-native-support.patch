diff --git a/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSession.kt b/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSession.kt
index 77a8b3c..c873aef 100644
--- a/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSession.kt
+++ b/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSession.kt
@@ -39,12 +39,13 @@ import java.util.*
  * @property webView An instance of a [TurboWebView] to be shared/managed.
  */
 @Suppress("unused")
-class TurboSession internal constructor(
+class TurboSession constructor(
     internal val sessionName: String,
     private val activity: AppCompatActivity,
     val webView: TurboWebView
 ) {
-    internal var currentVisit: TurboVisit? = null
+    var currentVisit: TurboVisit? = null
+        internal set
     internal var coldBootVisitIdentifier = ""
     internal var previousOverrideUrlTime = 0L
     internal var isColdBooting = false
@@ -55,6 +56,7 @@ class TurboSession internal constructor(
     internal val httpRepository = TurboHttpRepository(activity.lifecycleScope)
     internal val requestInterceptor = TurboWebViewRequestInterceptor(this)
     internal val fileChooserDelegate = TurboFileChooserDelegate(this)
+    var isRunningInAndroidNavigation = true
 
     // User accessible
 
@@ -129,7 +131,7 @@ class TurboSession internal constructor(
 
     // Internal
 
-    internal fun visit(visit: TurboVisit) {
+    fun visit(visit: TurboVisit) {
         this.currentVisit = visit
         callback { it.visitLocationStarted(visit.location) }
 
@@ -149,7 +151,7 @@ class TurboSession internal constructor(
      * visit request. This is used when restoring a Fragment destination from the backstack,
      * but the WebView's current location hasn't changed from the destination's location.
      */
-    internal fun restoreCurrentVisit(callback: TurboSessionCallback): Boolean {
+    fun restoreCurrentVisit(callback: TurboSessionCallback): Boolean {
         val visit = currentVisit ?: return false
         val restorationIdentifier = restorationIdentifiers[visit.destinationIdentifier]
 
@@ -627,7 +629,7 @@ class TurboSession internal constructor(
     private fun callback(action: (TurboSessionCallback) -> Unit) {
         context.runOnUiThread {
             currentVisit?.callback?.let { callback ->
-                if (callback.visitNavDestination().isActive) {
+                if (!isRunningInAndroidNavigation || callback.visitNavDestination().isActive) {
                     action(callback)
                 }
             }
diff --git a/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSessionCallback.kt b/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSessionCallback.kt
index 0bbaa01..7d8cc6c 100644
--- a/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSessionCallback.kt
+++ b/turbo/src/main/kotlin/dev/hotwire/turbo/session/TurboSessionCallback.kt
@@ -5,7 +5,7 @@ import dev.hotwire.turbo.nav.TurboNavDestination
 import dev.hotwire.turbo.errors.TurboVisitError
 import dev.hotwire.turbo.visit.TurboVisitOptions
 
-internal interface TurboSessionCallback {
+interface TurboSessionCallback {
     fun onPageStarted(location: String)
     fun onPageFinished(location: String)
     fun onReceivedError(error: TurboVisitError)
diff --git a/turbo/src/main/kotlin/dev/hotwire/turbo/views/TurboView.kt b/turbo/src/main/kotlin/dev/hotwire/turbo/views/TurboView.kt
index bc0596f..7ca2621 100644
--- a/turbo/src/main/kotlin/dev/hotwire/turbo/views/TurboView.kt
+++ b/turbo/src/main/kotlin/dev/hotwire/turbo/views/TurboView.kt
@@ -25,10 +25,10 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
     private val errorContainer: ViewGroup get() = findViewById(R.id.turbo_error_container)
     private val screenshotView: ImageView get() = findViewById(R.id.turbo_screenshot)
 
-    internal val webViewRefresh: SwipeRefreshLayout? get() = webViewContainer as? SwipeRefreshLayout
-    internal val errorRefresh: SwipeRefreshLayout? get() = findViewById(R.id.turbo_error_refresh)
+    val webViewRefresh: SwipeRefreshLayout? get() = webViewContainer as? SwipeRefreshLayout
+    val errorRefresh: SwipeRefreshLayout? get() = findViewById(R.id.turbo_error_refresh)
 
-    internal fun attachWebView(webView: WebView, onAttachedToNewDestination: (Boolean) -> Unit) {
+    fun attachWebView(webView: WebView, onAttachedToNewDestination: (Boolean) -> Unit) {
         if (webView.parent != null) {
             onAttachedToNewDestination(false)
             return
@@ -58,7 +58,7 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
         }
     }
 
-    internal fun detachWebView(webView: WebView, onDetached: () -> Unit) {
+    fun detachWebView(webView: WebView, onDetached: () -> Unit) {
         // If the view is already detached from the window (like
         // when dismissing a bottom sheet), detach immediately,
         // since posting to the message queue will be ignored.
@@ -77,7 +77,7 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
         return webViewContainer.contains(webView)
     }
 
-    internal fun addProgressView(progressView: View) {
+    fun addProgressView(progressView: View) {
         // Don't show the progress view if a screenshot is available
         if (screenshotView.isVisible) return
 
@@ -88,19 +88,19 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
         progressContainer.isVisible = true
     }
 
-    internal fun removeProgressView() {
+    fun removeProgressView() {
         progressContainer.removeAllViews()
         progressContainer.isVisible = false
     }
 
-    internal fun addScreenshot(screenshot: Bitmap?) {
+    fun addScreenshot(screenshot: Bitmap?) {
         if (screenshot == null) return
 
         screenshotView.setImageBitmap(screenshot)
         screenshotView.isVisible = true
     }
 
-    internal fun removeScreenshot() {
+    fun removeScreenshot() {
         screenshotView.setImageBitmap(null)
         screenshotView.isVisible = false
     }
@@ -119,7 +119,7 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
         }
     }
 
-    internal fun removeErrorView() {
+    fun removeErrorView() {
         errorContainer.removeAllViews()
         errorContainer.isVisible = false
 
@@ -130,7 +130,7 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
         }
     }
 
-    internal fun createScreenshot(): Bitmap? {
+    fun createScreenshot(): Bitmap? {
         if (!isLaidOut) return null
         if (!hasEnoughMemoryForScreenshot()) return null
         if (width <= 0 || height <= 0) return null
@@ -143,7 +143,7 @@ class TurboView @JvmOverloads constructor(context: Context, attrs: AttributeSet?
         }
     }
 
-    internal fun screenshotOrientation(): Int {
+    fun screenshotOrientation(): Int {
         return context.resources.configuration.orientation
     }
 
diff --git a/turbo/src/main/kotlin/dev/hotwire/turbo/visit/TurboVisit.kt b/turbo/src/main/kotlin/dev/hotwire/turbo/visit/TurboVisit.kt
index f3f4504..bbb215a 100644
--- a/turbo/src/main/kotlin/dev/hotwire/turbo/visit/TurboVisit.kt
+++ b/turbo/src/main/kotlin/dev/hotwire/turbo/visit/TurboVisit.kt
@@ -2,7 +2,7 @@ package dev.hotwire.turbo.visit
 
 import dev.hotwire.turbo.session.TurboSessionCallback
 
-internal data class TurboVisit(
+data class TurboVisit(
     val location: String,
     val destinationIdentifier: Int,
     val restoreWithCachedSnapshot: Boolean,
